{"uid":"e76b0d8c1e288b64","name":"Update Cart - No priceId","fullName":"Cart And Orders/Update Cart#Update Cart - No priceId","historyId":"adc1a13bbc7754c9f1869f90ccf94916:66ad61bcc45804d8dca56a251bfee6f6","time":{"start":1718994925076,"stop":1718994925201,"duration":125},"status":"failed","statusMessage":"Status code is 400, Status code response is 'Bad Request', Verify that message returns 'Validation Error.', Verify that data returns 'priceId should not be empty'","statusTrace":"Response code: 401, status: Unauthorized","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Status code is 400, Status code response is 'Bad Request', Verify that message returns 'Validation Error.', Verify that data returns 'priceId should not be empty'","statusTrace":"Response code: 401, status: Unauthorized","steps":[{"name":"Status code is 400","time":{"start":1718994925198,"stop":1718994925198,"duration":0},"status":"failed","statusMessage":"expected response to have status code 400 but got 401","statusTrace":"AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Status code response is 'Bad Request'","time":{"start":1718994925199,"stop":1718994925199,"duration":0},"status":"failed","statusMessage":"expected response to have status reason 'Bad Request' but got 'Unauthorized'","statusTrace":"AssertionError: expected response to have status reason 'Bad Request' but got 'Unauthorized'\n   at Object.eval sandbox-script.js:2:87)","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that message returns 'Validation Error.'","time":{"start":1718994925199,"stop":1718994925199,"duration":0},"status":"failed","statusMessage":"expected 'Session expired. Please login again.' to deeply equal 'Validation Error.'","statusTrace":"AssertionError: expected 'Session expired. Please login again.' to deeply equal 'Validation Error.'\n   at Object.eval sandbox-script.js:3:87)","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Verify that data returns 'priceId should not be empty'","time":{"start":1718994925200,"stop":1718994925200,"duration":0},"status":"failed","statusMessage":"Cannot read properties of undefined (reading 'priceId')","statusTrace":"TypeError: Cannot read properties of undefined (reading 'priceId')\n   at Object.eval sandbox-script.js:4:87)","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1025421964dbf956","name":"PreRequest","source":"1025421964dbf956.txt","type":"text/plain","size":80},{"uid":"55c217a84070f4cc","name":"Request Headers","source":"55c217a84070f4cc.json","type":"application/json","size":427},{"uid":"33c562fd6f99a4d5","name":"Request Body","source":"33c562fd6f99a4d5.txt","type":"text/plain","size":117},{"uid":"a1e193b1bd6b7a2f","name":"Response Headers","source":"a1e193b1bd6b7a2f.json","type":"application/json","size":383},{"uid":"891508e2a4c102df","name":"Response Body","source":"891508e2a4c102df.txt","type":"text/plain","size":50}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":5,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"newman"},{"name":"host","value":"localhost"},{"name":"parentSuite","value":"Cart And Orders"},{"name":"suite","value":"Update Cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"PUT - https://api-test.eatcheffie.com/v1/cart/meals"},{"name":"Response Code","value":"401"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"6b69cc6bfea8dcef","reportUrl":"https://assurdly.github.io/EATCHEFFIE-API-TESTS/358//#testresult/6b69cc6bfea8dcef","status":"failed","statusDetails":"Status code is 400, Status code response is 'Bad Request', Verify that message returns 'Validation Error.', Verify that data returns 'priceId should not be empty'","time":{"start":1718822124232,"stop":1718822124373,"duration":141}},{"uid":"c5f41b40235e9737","reportUrl":"https://assurdly.github.io/EATCHEFFIE-API-TESTS/357//#testresult/c5f41b40235e9737","status":"failed","statusDetails":"Status code is 400, Status code response is 'Bad Request', Verify that message returns 'Validation Error.', Verify that data returns 'priceId should not be empty'","time":{"start":1718785932596,"stop":1718785932728,"duration":132}},{"uid":"56ddfd9381342ddb","reportUrl":"https://assurdly.github.io/EATCHEFFIE-API-TESTS/353//#testresult/56ddfd9381342ddb","status":"failed","statusDetails":"Status code is 400, Status code response is 'Bad Request', Verify that message returns 'Validation Error.', Verify that data returns 'priceId should not be empty'","time":{"start":1718615807296,"stop":1718615807477,"duration":181}}]},"tags":[]},"source":"e76b0d8c1e288b64.json","parameterValues":["PUT - https://api-test.eatcheffie.com/v1/cart/meals","401"]}